// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI flow for dynamically adjusting recovery strategies based on real-time behavior tracking and mental health metrics.
 *
 * - adjustRecoveryStrategies - A function that adjusts recovery strategies based on the provided metrics.
 * - AdjustRecoveryStrategiesInput - The input type for the adjustRecoveryStrategies function.
 * - AdjustRecoveryStrategiesOutput - The return type for the adjustRecoveryStrategies function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AdjustRecoveryStrategiesInputSchema = z.object({
  behaviorData: z.string().describe('Real-time behavior tracking data in JSON format.'),
  mentalHealthMetrics: z.string().describe('Mental health metrics data in JSON format.'),
  currentStrategy: z.string().describe('The user\'s current recovery strategy.'),
});
export type AdjustRecoveryStrategiesInput = z.infer<typeof AdjustRecoveryStrategiesInputSchema>;

const AdjustRecoveryStrategiesOutputSchema = z.object({
  adjustedStrategy: z.string().describe('The dynamically adjusted recovery strategy.'),
  reasoning: z.string().describe('The AI\'s reasoning for the adjustments made.'),
});
export type AdjustRecoveryStrategiesOutput = z.infer<typeof AdjustRecoveryStrategiesOutputSchema>;

export async function adjustRecoveryStrategies(input: AdjustRecoveryStrategiesInput): Promise<AdjustRecoveryStrategiesOutput> {
  return adjustRecoveryStrategiesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'adjustRecoveryStrategiesPrompt',
  input: {schema: AdjustRecoveryStrategiesInputSchema},
  output: {schema: AdjustRecoveryStrategiesOutputSchema},
  prompt: `You are an AI-powered recovery platform expert. Analyze the user's behavior data and mental health metrics to dynamically adjust their recovery strategy.

  Current Strategy: {{{currentStrategy}}}
  Behavior Data: {{{behaviorData}}}
  Mental Health Metrics: {{{mentalHealthMetrics}}}

  Based on this information, provide a new adjusted recovery strategy, and provide reasoning for the changes you made.
  Ensure the adjusted strategy is safe, supportive, and tailored to the user's current needs.
  Consider making small, incremental changes rather than drastic overhauls unless absolutely necessary.
  Be empathetic and encouraging in your reasoning.
  `,
});

const adjustRecoveryStrategiesFlow = ai.defineFlow(
  {
    name: 'adjustRecoveryStrategiesFlow',
    inputSchema: AdjustRecoveryStrategiesInputSchema,
    outputSchema: AdjustRecoveryStrategiesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
